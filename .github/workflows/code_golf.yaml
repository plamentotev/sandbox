name: Code Golf
on:
  issue_comment:
    types: [created]
jobs:
  Evaluate:
    runs-on: ubuntu-latest
    if: github.event.issue.number == 17 && github.event.issue.state == 'open'
    timeout-minutes: 5
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Mark comment as being evaluated
        uses: actions/github-script@v2
        with:
          script: |
            const comment_id = context.payload.comment.id;

            github.reactions.createForIssueComment({
              comment_id: comment_id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: `eyes`
            });

      - name: Generate input and expected output
        id: data
        uses: actions/github-script@v2
        with:
          result-encoding: json
          script: |
            return { input: 'abc', output: 'abc' }

      - name: Evaluate the solution
        id: evaluate
        uses: ./.github/actions/emoji-gramming-evaluate-action
        with:
          code: ${{ github.event.comment.body }}
          input: ${{ fromJSON(steps.data.outputs.result).input }}

      - name: Update the leaderboard
        if: steps.evaluate.outputs.success == 'true' && steps.evaluate.outputs.output == fromJSON(steps.data.outputs.result).output
        uses: ./.github/actions/update-leaderboard-action
        with:
          user: ${{ github.event.comment.user.login }}
          score: ${{ steps.evaluate.outputs.commands-count }}
          leaderboard: data/leaderboard-1.json
          template: readme-template.tpl

      - name: Commit changes
        run: |
          git add data/leaderboard-1.json README.md
          if ! git diff --staged --quiet; then
            git config user.name github-actions
            git config user.email github-actions@github.com

            git commit -m "Update leaderboard"
            git push
          fi

      - name: Give feedback
        uses: actions/github-script@v2
        env:
          EVALUATION_SUCCESS: ${{ steps.evaluate.outputs.success }}
          EVALUATION_OUTPUT: ${{ steps.evaluate.outputs.output }}
          EXPECTED_OUTPUT: ${{ fromJSON(steps.data.outputs.result).output }}
          EVALUATION_SCORE: ${{ steps.evaluate.outputs.commands-count }}
        with:
          script: |
            const expectedResult = 'abc';

            const issue_number = context.payload.issue.number;
            const comment_id = context.payload.comment.id;
            const comment_user = context.payload.comment.user.login;

            let reaction;
            let feedback;
            if (process.env.EVALUATION_SUCCESS == 'false') {
                reaction = 'confused';
                feedback = `Sorry @${comment_user}, your solution exited with an error:\n\n>${process.env.EVALUATION_OUTPUT}`;
            } else if (process.env.EVALUATION_OUTPUT == process.env.EXPECTED_OUTPUT) {
                reaction = 'hooray';
                feedback = `Congratulations @${comment_user}, your solution is correct.\n\nScore:${process.env.EVALUATION_SCORE}`;
            } else {
                reaction = 'confused';
                feedback = `Sorry @${comment_user}, your solution exited normally, but the output differs from the expected.`;
            }

            github.reactions.createForIssueComment({
              comment_id: comment_id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: reaction
            });
            github.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: feedback
            });
